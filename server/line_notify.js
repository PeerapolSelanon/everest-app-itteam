const { Client } = require('pg')
const axios = require('axios')
const cron = require('node-cron')

console.log('line_notify Start')
// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ PostgreSQL
const client = new Client({
  user: 'postgres',
  host: 'localhost',
  database: 'db_everestth',
  password: 'everest@123',
  port: 5432
})
// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Line Notify Token
const LINE_NOTIFY_TOKEN = 'Cpx036Yy5A87mhY7R9k9xig9zyGMIpcGfbvzroZZXZj'

const emoji = {
  meeting: 'üñ•Ô∏è',
  time: '‚è∞',
  detail: 'üìù'
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô Line Notify API
async function sendLineNotify(message) {
  try {
    const response = await axios.post(
      'https://notify-api.line.me/api/notify',
      { message },
      {
        headers: {
          Authorization: `Bearer ${LINE_NOTIFY_TOKEN}`,
          'Content-Type': 'application/x-www-form-urlencoded'
        }
      }
    )
    console.log('Line Notify response:', response.data)
  } catch (error) {
    console.error('Error sending Line Notify:', error.message)
  }
}

// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PostgreSQL
client.connect()

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ cron job ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
cron.schedule('*/1 * * * *', async () => {
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏∏‡∏Å‡πÜ 1 ‡∏ô‡∏≤‡∏ó‡∏µ
    try {
      const query = `
        SELECT *
        FROM meetings
        WHERE time_start BETWEEN CURRENT_TIME AND CURRENT_TIME + INTERVAL '30 minutes'
        AND date = CURRENT_DATE
        AND status = 'false'
      `
      const result = await client.query(query)
      const meetings = result.rows
  
      if (meetings.length <= 0) {
        return console.log('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ')
      }
  
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°
      meetings.forEach(async (meeting) => {
        const currentTime = new Date()
        const formattedcurrentTime = currentTime.toLocaleTimeString('en-US', { hour12: false })
        const [hour1, minute1, second1] = formattedcurrentTime.split(':')
        const countsecound1 = parseInt(hour1) * 60 * 60 + parseInt(minute1) * 60 + parseInt(second1)
        const [hour2, minute2, second2] = meeting.time_start.split(':')
        const countsecound2 = parseInt(hour2) * 60 * 60 + parseInt(minute2) * 60 + parseInt(second2)
  
        const timeDiff = countsecound2 - countsecound1 // ‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤
        const minutesLeft = Math.floor(parseInt(timeDiff) / 60) //‡∏ó‡∏≥‡∏ô‡∏≤‡∏ó‡∏µ
  
        let message = `
‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏µ‡∏Å ${minutesLeft} ‡∏ô‡∏≤‡∏ó‡∏µ
${emoji.meeting} ‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°: ${meeting.head}
${emoji.meeting} ‡∏´‡πâ‡∏≠‡∏á: ${meeting.room}
${emoji.time} ‡πÄ‡∏ß‡∏•‡∏≤: ${meeting.time_start.split(':')[0]}:${meeting.time_start.split(':')[1]}
${emoji.detail} ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${meeting.detail}
‡∏•‡∏¥‡∏á‡∏Ñ‡πå: ${meeting.url}
        `        
  
        await sendLineNotify(message)
        
        const updateQuery = `
          UPDATE meetings
          SET status = 'true'
          WHERE id = $1;
        `
        await client.query(updateQuery, [meeting.id])
        console.log('Successfully updated status meetings')
      })
    } catch (error) {
      console.error('Error fetching or sending data:', error.message)
    }
  })
  

// ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤
process.stdin.resume()
